"use client";
import {
  Dialog
} from "./chunk-FM54MXW6.js";
import {
  Button
} from "./chunk-M263K4MP.js";
import {
  OverlayService
} from "./chunk-N5EPYY6O.js";
import "./chunk-WISUZEEK.js";
import "./chunk-IOUTZ2FC.js";
import "./chunk-3KFGH535.js";
import "./chunk-FADRQYG2.js";
import "./chunk-PHJUW7RH.js";
import {
  Portal
} from "./chunk-GSN624HS.js";
import "./chunk-WALXKXZM.js";
import {
  ComponentBase,
  useHandleStyle,
  useMergeProps,
  useUnmountEffect,
  useUpdateEffect
} from "./chunk-CWI4EHLR.js";
import {
  DomHandler,
  IconUtils,
  ObjectUtils,
  PrimeReactContext,
  classNames,
  localeOption
} from "./chunk-56GANKAQ.js";
import {
  require_react
} from "./chunk-WQMOH32Y.js";
import {
  __toESM
} from "./chunk-5WWUZCGV.js";

// ../node_modules/primereact/confirmdialog/confirmdialog.esm.js
var React = __toESM(require_react());
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t)
        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
function _arrayWithHoles(r) {
  if (Array.isArray(r))
    return r;
}
function _iterableToArrayLimit(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e, n, i, u, a = [], f = true, o = false;
    try {
      if (i = (t = t.call(r)).next, 0 === l) {
        if (Object(t) !== t)
          return;
        f = false;
      } else
        for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true)
          ;
    } catch (r2) {
      o = true, n = r2;
    } finally {
      try {
        if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u))
          return;
      } finally {
        if (o)
          throw n;
      }
    }
    return a;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray(r, e) {
  return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
}
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}
function toPrimitive(t, r) {
  if ("object" != _typeof(t) || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof(i))
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function toPropertyKey(t) {
  var i = toPrimitive(t, "string");
  return "symbol" == _typeof(i) ? i : i + "";
}
function _defineProperty(e, r, t) {
  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
    value: t,
    enumerable: true,
    configurable: true,
    writable: true
  }) : e[r] = t, e;
}
var classes = {
  root: "p-confirm-dialog",
  message: "p-confirm-dialog-message",
  icon: "p-confirm-dialog-icon",
  acceptButton: "p-confirm-dialog-accept",
  rejectButton: function rejectButton(_ref) {
    var getPropValue = _ref.getPropValue;
    return classNames("p-confirm-dialog-reject", {
      "p-button-text": !getPropValue("rejectClassName")
    });
  }
};
var ConfirmDialogBase = ComponentBase.extend({
  defaultProps: {
    __TYPE: "ConfirmDialog",
    accept: null,
    acceptClassName: null,
    acceptIcon: null,
    acceptLabel: null,
    appendTo: null,
    breakpoints: null,
    children: void 0,
    className: null,
    content: null,
    defaultFocus: "accept",
    footer: null,
    icon: null,
    message: null,
    onHide: null,
    reject: null,
    rejectClassName: null,
    rejectIcon: null,
    rejectLabel: null,
    tagKey: void 0,
    visible: void 0
  },
  css: {
    classes
  }
});
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var confirmDialog = function confirmDialog2() {
  var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  props = _objectSpread(_objectSpread({}, props), {
    visible: props.visible === void 0 ? true : props.visible
  });
  props.visible && OverlayService.emit("confirm-dialog", props);
  var show = function show2() {
    var updatedProps = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    OverlayService.emit("confirm-dialog", _objectSpread(_objectSpread(_objectSpread({}, props), updatedProps), {
      visible: true
    }));
  };
  var hide = function hide2() {
    OverlayService.emit("confirm-dialog", {
      visible: false
    });
  };
  return {
    show,
    hide
  };
};
var ConfirmDialog = React.memo(React.forwardRef(function(inProps, ref) {
  var mergeProps = useMergeProps();
  var context = React.useContext(PrimeReactContext);
  var props = ConfirmDialogBase.getProps(inProps, context);
  var _React$useState = React.useState(props.visible), _React$useState2 = _slicedToArray(_React$useState, 2), visibleState = _React$useState2[0], setVisibleState = _React$useState2[1];
  var _React$useState3 = React.useState(false), _React$useState4 = _slicedToArray(_React$useState3, 2), reshowState = _React$useState4[0], setReshowState = _React$useState4[1];
  var confirmProps = React.useRef(null);
  var isCallbackExecuting = React.useRef(false);
  var focusElementOnHide = React.useRef(null);
  var getCurrentProps = function getCurrentProps2() {
    var group = props.group;
    if (confirmProps.current) {
      group = confirmProps.current.group;
    }
    return Object.assign({}, props, confirmProps.current, {
      group
    });
  };
  var getPropValue = function getPropValue2(key) {
    return getCurrentProps()[key];
  };
  var callbackFromProp = function callbackFromProp2(key) {
    for (var _len = arguments.length, param = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      param[_key - 1] = arguments[_key];
    }
    return ObjectUtils.getPropValue(getPropValue(key), param);
  };
  var acceptLabel = getPropValue("acceptLabel") || localeOption("accept");
  var rejectLabel = getPropValue("rejectLabel") || localeOption("reject");
  var metaData = {
    props,
    state: {
      visible: visibleState
    }
  };
  var _ConfirmDialogBase$se = ConfirmDialogBase.setMetaData(metaData), ptm = _ConfirmDialogBase$se.ptm, cx = _ConfirmDialogBase$se.cx, isUnstyled = _ConfirmDialogBase$se.isUnstyled;
  useHandleStyle(ConfirmDialogBase.css.styles, isUnstyled, {
    name: "confirmdialog"
  });
  var accept = function accept2() {
    if (!isCallbackExecuting.current) {
      isCallbackExecuting.current = true;
      callbackFromProp("accept");
      hide("accept");
    }
  };
  var reject = function reject2() {
    if (!isCallbackExecuting.current) {
      isCallbackExecuting.current = true;
      callbackFromProp("reject");
      hide("reject");
    }
  };
  var show = function show2() {
    var currentProps = getCurrentProps();
    if (currentProps.group === props.group) {
      setVisibleState(true);
      isCallbackExecuting.current = false;
      focusElementOnHide.current = document.activeElement;
    }
  };
  var hide = function hide2() {
    var result = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "cancel";
    if (visibleState) {
      if (typeof result !== "string") {
        result = "cancel";
      }
      setVisibleState(false);
      callbackFromProp("onHide", result);
      DomHandler.focus(focusElementOnHide.current);
      focusElementOnHide.current = null;
    }
  };
  var confirm = function confirm2(updatedProps) {
    if (updatedProps.tagKey === props.tagKey) {
      var isVisibleChanged = visibleState !== updatedProps.visible;
      var targetChanged = getPropValue("target") !== updatedProps.target;
      if (targetChanged && !props.target) {
        hide();
        confirmProps.current = updatedProps;
        setReshowState(true);
      } else if (isVisibleChanged) {
        confirmProps.current = updatedProps;
        updatedProps.visible ? show() : hide();
      }
    }
  };
  React.useEffect(function() {
    props.visible ? show() : hide();
  }, [props.visible]);
  React.useEffect(function() {
    if (!props.target && !props.message) {
      OverlayService.on("confirm-dialog", confirm);
    }
    return function() {
      OverlayService.off("confirm-dialog", confirm);
    };
  }, [props.target]);
  useUpdateEffect(function() {
    reshowState && show();
  }, [reshowState]);
  useUnmountEffect(function() {
    OverlayService.off("confirm-dialog", confirm);
  });
  React.useImperativeHandle(ref, function() {
    return {
      props,
      confirm
    };
  });
  var createFooter = function createFooter2() {
    var defaultFocus = getPropValue("defaultFocus");
    var acceptClassName = classNames("p-confirm-dialog-accept", getPropValue("acceptClassName"));
    var rejectClassName = classNames("p-confirm-dialog-reject", {
      "p-button-text": !getPropValue("rejectClassName")
    }, getPropValue("rejectClassName"));
    var rejectButtonProps = mergeProps({
      label: rejectLabel,
      autoFocus: defaultFocus === "reject",
      icon: getPropValue("rejectIcon"),
      className: classNames(getPropValue("rejectClassName"), cx("rejectButton", {
        getPropValue
      })),
      onClick: reject,
      pt: ptm("rejectButton"),
      unstyled: props.unstyled,
      __parentMetadata: {
        parent: metaData
      }
    }, ptm("rejectButton"));
    var acceptButtonProps = mergeProps({
      label: acceptLabel,
      autoFocus: defaultFocus === void 0 || defaultFocus === "accept",
      icon: getPropValue("acceptIcon"),
      className: classNames(getPropValue("acceptClassName"), cx("acceptButton")),
      onClick: accept,
      pt: ptm("acceptButton"),
      unstyled: props.unstyled,
      __parentMetadata: {
        parent: metaData
      }
    }, ptm("acceptButton"));
    var content = React.createElement(React.Fragment, null, React.createElement(Button, rejectButtonProps), React.createElement(Button, acceptButtonProps));
    if (getPropValue("footer")) {
      var defaultContentOptions = {
        accept,
        reject,
        acceptClassName,
        rejectClassName,
        acceptLabel,
        rejectLabel,
        element: content,
        props: getCurrentProps()
      };
      return ObjectUtils.getJSXElement(getPropValue("footer"), defaultContentOptions);
    }
    return content;
  };
  var createElement2 = function createElement3() {
    var currentProps = getCurrentProps();
    var message = ObjectUtils.getJSXElement(getPropValue("message"), currentProps);
    var iconProps = mergeProps({
      className: cx("icon")
    }, ptm("icon"));
    var icon = IconUtils.getJSXIcon(getPropValue("icon"), _objectSpread({}, iconProps), {
      props: currentProps
    });
    var footer = createFooter();
    var messageProps = mergeProps({
      className: cx("message")
    }, ptm("message"));
    var rootProps = mergeProps({
      visible: visibleState,
      className: classNames(getPropValue("className"), cx("root")),
      footer,
      onHide: hide,
      breakpoints: getPropValue("breakpoints"),
      pt: currentProps.pt,
      unstyled: props.unstyled,
      appendTo: getPropValue("appendTo"),
      __parentMetadata: {
        parent: metaData
      }
    }, ConfirmDialogBase.getOtherProps(currentProps));
    return React.createElement(Dialog, _extends({}, rootProps, {
      content: inProps === null || inProps === void 0 ? void 0 : inProps.content
    }), icon, React.createElement("span", messageProps, message));
  };
  var element = createElement2();
  return React.createElement(Portal, {
    element,
    appendTo: getPropValue("appendTo")
  });
}));
ConfirmDialog.displayName = "ConfirmDialog";
export {
  ConfirmDialog,
  confirmDialog
};
//# sourceMappingURL=primereact_confirmdialog.js.map
